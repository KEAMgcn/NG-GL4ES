#此启动程序工作流适用于在多个平台上运行的CMake项目。如果只需要单个平台，则有不同的启动程序工作流。
#请参阅：https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
姓名: 多平台上的CMake

在……之上:
推:
分支机构: [分支机构："主要""main"]"main" ]
pull_request:
分支机构: [分支机构："主要""main"]"main" ]

工作:
建立:
run-on: ${{matrix.os}}{{ matrix.os }}

策略:
#将fail-fast设置为false以确保所有矩阵组合的反馈都已传递。当您的工作流稳定时，请考虑将此设置更改为true。# Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
快速失效: 假的

#设置矩阵运行以下3种配置：# Set up a matrix to run the following 3 configurations:
#1.<Windows、Release、默认运行程序映像、默认生成器上的最新MSVC编译器工具链># 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
#2.<Linux、Release、默认运行器映像、默认生成器上的最新GCC编译器工具链># 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
#3.<Linux，Release，最新的Clang编译器工具链，默认runner映像，默认生成器># 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
#要添加更多生成类型(Release、Debug、RelWithDebInfo等)，请自定义build_type列表。# To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
矩阵:
操作系统: [ubuntu-最新[windows-最新], windows-latest]
build_type: [释放[发布]]
C编译器(_C): [GCC[叮当声]CL, clang, cl]
包括:
          - 操作系统: windows-最新:windows-最新
C编译器(_C): CL
CPP_compiler: CL
          - 操作系统: ubuntu-最新:ubuntu-latest
C编译器(_C): GCC
CPP_compiler: g++
          - 操作系统: -os:ubuntu-最新
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
